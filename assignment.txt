Data Scientist Role Play: Profiling and Analyzing the Yelp Dataset Coursera Worksheet

This is a 2-part assignment. In the first part, you are asked a series of questions that will help you profile and understand the data just like a data scientist would. For this first part of the assignment, you will be assessed both on the correctness of your findings, as well as the code you used to arrive at your answer. You will be graded on how easy your code is to read, so remember to use proper formatting and comments where necessary.

In the second part of the assignment, you are asked to come up with your own inferences and analysis of the data for a particular research question you want to answer. You will be required to prepare the dataset for the analysis you choose to do. As with the first part, you will be graded, in part, on how easy your code is to read, so use proper formatting and comments to illustrate and communicate your intent as required.

For both parts of this assignment, use this "worksheet." It provides all the questions you are being asked, and your job will be to transfer your answers and SQL coding where indicated into this worksheet so that your peers can review your work. You should be able to use any Text Editor (Windows Notepad, Apple TextEdit, Notepad ++, Sublime Text, etc.) to copy and paste your answers. If you are going to use Word or some other page layout application, just be careful to make sure your answers and code are lined appropriately.
In this case, you may want to save as a PDF to ensure your formatting remains intact for you reviewer.



Part 1: Yelp Dataset Profiling and Understanding

1. Profile the data by finding the total number of records for each of the tables below:
	
i. Attribute table =10000
ii. Business table =10000
iii. Category table =10000
iv. Checkin table =10000
v. elite_years table =10000
vi. friend table = 10000
vii. hours table =10000
viii. photo table = 10000
ix. review table = 10000
x. tip table = 10000
xi. user table = 10000
	


2. Find the total distinct records by either the foreign key or primary key for each table. If two foreign keys are listed in the table, please specify which foreign key.

i. Business = id - 10000
ii. Hours = business_id - 1562
iii. Category = business_id - 2643
iv. Attribute = business_id - 1115
v. Review = id - 10000, user_id - 9581, business_id - 8090
vi. Checkin = business_id - 493
vii. Photo = id - 10000, business_id - 6493
viii. Tip = user_id - 537, business_id - 3979
ix. User = id - 10000
x. Friend = user_id - 11
xi. Elite_years = user_id - 2780

Note: Primary Keys are denoted in the ER-Diagram with a yellow key icon.	



3. Are there any columns with null values in the Users table? Indicate "yes," or "no."

	Answer: no
	
	
	SQL code used to arrive at answer:
	select * from user where 
	id is null or name is null or
	review_count is null or yelping_since is null or 
	useful is null or funny is null or 
	cool is null or fans is null or average_stars is null or 
	compliment_hot is null or compliment_more is null or
	compliment_profile is null or compliment_cute is null or 
	compliment_list is null or compliment_note is null or 
	compliment_plain is null or compliment_cool is null or 
	compliment_funny is null or compliment_writer is null or
	compliment_photos is null;
	

	
4. For each table and column listed below, display the smallest (minimum), largest (maximum), and average (mean) value for the following fields:

	i. Table: Review, Column: Stars
	
		min:	1	max:	5	avg:3.7082
		
	
	ii. Table: Business, Column: Stars
	
		min:	1.0	max:5.0	avg:3.6549
		
	
	iii. Table: Tip, Column: Likes
	
		min:0	max:	2	avg:0.0144
		
	
	iv. Table: Checkin, Column: Count
	
		min:	1	max:	53	avg:1.9414
		
	
	v. Table: User, Column: Review_count
	
		min:	0	max:	2000	avg:24.2995
		


5. List the cities with the most reviews in descending order:

	SQL code used to arrive at answer: 
select city,sum(review_count) as total_reviews from business
group by city order by total_reviews desc;
	
	Copy and Paste the Result Below:

+-----------------+---------------+
| city            | total_reviews |
+-----------------+---------------+
| Las Vegas       |         82854 |
| Phoenix           |         34503 |
| Toronto            |         24113 |
| Scottsdale       |         20614 |
| Charlotte         |         12523 |
| Henderson      |         10871 |
| Tempe            |         10504 |
| Pittsburgh      |          9798 |
| Montréal         |          9448 |
| Chandler        |          8112 |
| Mesa              |          6875 |
| Gilbert            |          6380 |
| Cleveland       |          5593 |
| Madison         |          5265 |
| Glendale        |          4406 |
| Mississauga  |          3814 |
| Edinburgh     |          2792 |
| Peoria            |        2624 |
| North Las Vegas |          2438 |
| Markham       |          2352 |
| Champaign    |          2029 |
| Stuttgart         |          1849 |
| Surprise         |          1520 |
| Lakewood       |          1465 |
| Goodyear        |          1155 |
+-----------------+---------------+
(Output limit exceeded, 25 of 362 total rows shown)
	
6. Find the distribution of star ratings to the business in the following cities:

i. Avon

SQL code used to arrive at answer:
select stars,count(stars) from business where city like 'avon' group by stars ;
	

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   1.5 |            1 |
|   2.5 |            2 |
|   3.5 |            3 |
|   4.0 |            2 |
|   4.5 |            1 |
|   5.0 |            1 |
+-------+--------------+

ii. Beachwood

SQL code used to arrive at answer:
select stars,count(stars) from business where city like 'beachwood' group by stars ;

Copy and Paste the Resulting Table Below (2 columns – star rating and count):
+-------+--------------+
| stars | count(stars) |
+-------+--------------+
|   2.0 |            1 |
|   2.5 |            1 |
|   3.0 |            2 |
|   3.5 |            2 |
|   4.0 |            1 |
|   4.5 |            2 |
|   5.0 |            5 |
+-------+--------------+		


7. Find the top 3 users based on their total number of reviews:
		
	SQL code used to arrive at answer:
select id,review_count from user order by review_count desc limit 3;

	Copy and Paste the Result Below:
+------------------------+--------------+
| id                  				   | review_count |
+------------------------+--------------+
| -G7Zkl1wIWBBmD0KRy_sCw |         2000 |
| -3s52C4zL_DHRK0ULG6qtg   |         1629 |
| -8lbUNlXVSoXqaRRiHiSNg     |         1339 |
+------------------------+--------------+


8. Does posing more reviews correlate with more fans?

	Please explain your findings and interpretation of the results:
	
Number of reviews is not correlated to number of fans. 
There are 9 id's with more than 100 review count but have 0 fans, for instance id (-KkGLpVV8GPc-sBXY8LrVQ) has a review_count of 359 but has 0 fans.  
Adding to that, an id(-5mqBgsuzJC5mxA9HQvAyQ) has a review count of 7 but has 70 fans. 
An id(-9I98YbNQnLdAmcYfb324Q) has a review count of 609 but has  503 fans, whereas an id(-2vR0DIsmQ6WfcSzKWigw) has a review_count of 1153 but a mere fan count of 311;
	
9. Are there more reviews with the word "love" or with the word "hate" in them?

	Answer:
 There are 1958 rows with the word 'hate' or 'love' which contributes to be around 20% of the total reviews. I would say 20% is a good number, so my answer is yes.
	
	SQL code used to arrive at answer:
select count(*) from review where text like '%hate%'  or text like '%love%';
	
	
10. Find the top 10 users with the most fans:

	SQL code used to arrive at answer:
select id,fans from user order by fans desc limit 10;	
	
	Copy and Paste the Result Below:

+-----------------------------------------+------+
| id                   				   | fans |
+------------------------------------------+------+
| -9I98YbNQnLdAmcYfb324Q    |  503 |
| -8EnCioUmDygAbsYZmTeRQ |  497 |
| --2vR0DIsmQ6WfcSzKWigw   |  311 |
| -G7Zkl1wIWBBmD0KRy_sCw |  253 |
| -0IiMAZI2SsQ7VmyzJjokQ 	    |  173 |
| -g3XIcCb2b-BD0QBCcq2Sw    |  159 |
| -9bbDysuiWeo2VShFJJtcw       |  133 |
| -FZBTkAZEXoP7CYvRV2ZwQ |  126 |
| -9da1xk7zgnnfO1uTVYGkA     |  124 |
| -lh59ko3dxChBSZ9U7LfUw      |  120 |
+-----------------------------------------+------+	
		

Part 2: Inferences and Analysis

1. Pick one city and category of your choice and group the businesses in that city or category by their overall star rating. Compare the businesses with 2-3 stars to the businesses with 4-5 stars and answer the following questions. Include your code.
	
i. Do the two groups you chose to analyze have a different distribution of hours?

All the businesses have similar working days, this is based on the data available(total_business_days).
Some of the businesses total business days were 0 eventhough there were open(is_open=1). 

+------------------------------------------+-------------+-------------+-------+------------+-------------+---------------------+
| id                                              | city         | category    | stars | is_open | stars_range | total_business_days |
+------------------------------------------+------------+-------------+-------+-------------+-------------+---------------------+
| -HVFJ-fD12z1evEExDPZ_A       | Toronto | Restaurants |   4.0 |         0 | high_range  |                   0 |
| 2lo7N8RZOCS0DDxO6LPQhw   | Toronto | Restaurants |   4.0 |        1 | high_range  |                   0 |
| 37kk0IW6jL7ZlxZF6k2QBg        | Toronto | Restaurants |   4.0 |         1 | high_range  |                   5 |
| -n27mJ_jQWGCuIukTvg9Mg     | Toronto | Restaurants |   4.5 |         1 | high_range  |                   7 |
| 0e-j5VcEn54EZT-FKCUZdw      | Toronto | Restaurants |   4.5 |         1 | high_range  |                   7 |
| 2YUPCtZkuoGQ4wBn8ncV_w   | Toronto | Restaurants |   3.5 |         1 | low_range   |                   0 |
| 0B3W6KxkD3o4W4l6cq735w    | Toronto | Restaurants |   3.0 |         1 | low_range   |                   7 |
| 1NyHpXJqSLHnvDCOW0nJDg  | Toronto | Restaurants |   3.0 |         1 | low_range   |                   7 |
| 1nTMWMa6v-eBKkPYA3gxkQ   | Toronto | Restaurants |   2.0 |         0 | low_range   |                   7 |
| -xEGQKqXZzvkdyVQilQtrg        | Toronto | Restaurants |   1.5 |         1 | other           |                   0 |
--------------------------------------------+-----------+----------------+-------+---------+-----------------+------------------+
select id,city,category,stars,is_open
case
when stars >=2.0 and stars <4.0 then 'low_range'
when stars >=4.0 and stars <=5.0 then 'high_range'
else 'other'
end as stars_range,
count(hours.business_id) as total_business_days 
from business inner join category on business.id=category.business_id
left join hours on business.id=hours.business_id 
where city like "Toronto" and category like "Restaurants"
group by id
order by stars_range,total_business_days;

ii. Do the two groups you chose to analyze have a different number of reviews?
+----------------+---------------------------+----------------+
| category      | sum(review_count) | stars_range |
+-------------    +---------------------------+----------------+
| Restaurants |               206 	       | high_range  |
| Restaurants |                89             | low_range    |
| Restaurants |                 4              | other            |
+----------------+----------------------------+----------------+
select category,sum(review_count),
case
when stars >=2.0 and stars <4.0 then 'low_range'
when stars >=4.0 and stars <=5.0 then 'high_range'
else 'other'
end as stars_range
from business
inner join category 
on business.id=category.business_id
where city like "Toronto" and category like "Restaurants"
group by stars_range;         

Yes, the group with higher stars have more reviews.

iii. Are you able to infer anything from the location data provided between these two groups? Explain.

select id,stars,postal_code,latitude,longitude from business inner join category on
business.id=category.business_id where city like "Toronto" and category like "Restaurants"
order by postal_code;

+----------------------------------------------+-------+-----------------+-----------+-----------+
| id                                                   | stars | postal_code | latitude   | longitude |
+---------------------------------------------+-------+-----------------+------------+-----------+
| 2lo7N8RZOCS0DDxO6LPQhw   |   4.0 | M2N 5R6     |  43.7766 |  -79.4142 |
| -xEGQKqXZzvkdyVQilQtrg          |   1.5 | M2N 7A1     |  43.7752 |   -79.414 |
| 0B3W6KxkD3o4W4l6cq735w     |   3.0 | M4B 2L9      |  43.6546 |  -79.3805 |
| 1nTMWMa6v-eBKkPYA3gxkQ    |   2.0 | M5B 2E5     |  43.6614 |   -79.379 |
| 1NyHpXJqSLHnvDCOW0nJDg   |   3.0 | M5H 1X6     |  43.6479 |  -79.3901 |
| 37kk0IW6jL7ZlxZF6k2QBg          |   4.0 | M5V            |  43.6419 |  -79.4066 |
| 2YUPCtZkuoGQ4wBn8ncV_w     |   3.5 | M6B            |  43.7175 |  -79.4291 |
| -HVFJ-fD12z1evEExDPZ_A        |   4.0 | M6C 1B6     |  43.6809 |  -79.4302 |
| -n27mJ_jQWGCuIukTvg9Mg      |   4.5 | M6P 1A6     |  43.6553 |  -79.4567 |
| 0e-j5VcEn54EZT-FKCUZdw       |   4.5 | M9A 1C2     |  43.6452 |  -79.5324 |
+--------------------------------------------+-------+-----------------+-------------+---------------+

No conclusions can be drawn from the location data.

SQL code used for analysis:

		
		
2. Group business based on the ones that are open and the ones that are closed. What differences can you find between the ones that are still open and the ones that are closed? List at least two differences and the SQL code you used to arrive at your answer.
		
i. Difference 1: Total_businesses: The business which are open are more in number compared to the ones which are closed.
         
         
ii. Difference 2: Review_count: The businesses which are open have more review_count than the ones which are closed.
         
         
         
SQL code used for analysis:
select is_open,count(id) as total_business_count,
sum(review_count) as total_review_count,
round(avg(review_count),2)as avg_review_count,
round(avg(stars),2) as avg_star
from business
group by is_open ;
+---------+------------------------------+--------------------------+-------------------------+------------+
| is_open | total_business_count | total_review_count | avg_review_count | avg_star |
+---------+------------------------------+--------------------------+-------------------------+------------+
|       0 |                              1520 |                    35261 |                       23.2 |       3.52 |
|       1 |                              8480 |                  269300 |                     31.76 |       3.68 |
+---------+------------------------------+--------------------------+-------------------------+------------+
	
	
3. For this last part of your analysis, you are going to choose the type of analysis you want to conduct on the Yelp dataset and are going to prepare the data for analysis.

Ideas for analysis include: Parsing out keywords and business attributes for sentiment analysis, clustering businesses to find commonalities or anomalies between them, predicting the overall star rating for a business, predicting the number of fans a user will have, and so on. These are just a few examples to get you started, so feel free to be creative and come up with your own problem you want to solve. Provide answers, in-line, to all of the following:
	
i. Indicate the type of analysis you chose to do:
I would choose to combine category table with the business table, which will help in predicting which category will have the maximum review count.
         
         
ii. Write 1-2 brief paragraphs on the type of data you will need for your analysis and why you chose that data:
I need category, review_count, stars columns from category and business tables
                           
                  
iii. Output of your finished dataset:
+-------------------------------+-------------------------+-----------+
| category                     | total_review_count | avg_stars |
+-----------------------------+---------------------------+-----------+
| Restaurants                |                     4504 |      3.46 |
| Food                          |                      1781 |      3.78 |
| Nightlife                      |                      1351 |      3.48 |
| Bars                           |                      1322 |       3.5 |
| American (Traditional) |                      1128 |      3.82 |
| Shopping                    |                        977 |      3.98 |
| Sandwiches                |                        974 |      3.94 |
| Specialty Food            |                        896 |       4.0 |
| Chinese                      |          		     796 |      3.13 |
| Asian Fusion               |           	     793 |       3.5 |
| Soup                           |                	     789 |      3.75 |
| Noodles                      |             	     773 |      3.25 |
| Malaysian                   |                	     768 |       4.0 |
| Taiwanese                  |              	     768 |       4.0 |
| Ethnic Food                |               	     726 |       4.0 |
| Farmers Market          |                        723 |       4.5 |
| Fruits & Veggies         |                        723 |       4.5 |
| Market Stalls              |                	     723 |       4.5 |
| Meat Shops                |              	    723 |       4.5 |
| Public Markets            |                       723 |       4.5 |
| Seafood Markets         |                	    723 |       4.5 |
| Barbeque                    |                	    505 |      3.75 |
| American (New)          |                	    481 |      3.33 |
| Smokehouse              |             	    431 |       4.0 |
| Salad                          |                	    396 |       4.5 |
+------------------------------+-------------------------+-----------+
         
         
iv. Provide the SQL code you used to create your final dataset:

select category,sum(review_count) as total_review_count,
round(avg(stars),2) as avg_stars from 
business inner join category on
business.id=category.business_id
group by category
order by sum(review_count) desc;